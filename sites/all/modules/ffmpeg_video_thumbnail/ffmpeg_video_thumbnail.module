<?php
/**
 * @file
 * Hook implementations and shared functions for the FFMpeg Video Thumbnail.
 */

/**
 * Implements hook_field_formatter_info().
 */
function ffmpeg_video_thumbnail_field_formatter_info() {
  $formatters = array();
  $formatters['ffmpeg_thumbnail_image'] = array(
    'label' => t('FFMpeg Thumbnail'),
    'field types' => array('file'),
    'description' => t('Displays a single frame of a video file, extracted using FFMpeg.'),
    'settings' => array(),
  );
  if (module_exists('picture')) {
    $formatters['ffmpeg_thumbnail_picture'] = $formatters['ffmpeg_thumbnail_image'];
    $formatters['ffmpeg_thumbnail_image']['label'] = t('FFMpeg Thumbnail (Image)');
    $formatters['ffmpeg_thumbnail_picture']['label'] = t('FFMpeg Thumbnail (Picture)');
  }
  return $formatters;
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function ffmpeg_video_thumbnail_field_formatter_info_alter(&$info) {
  $info['ffmpeg_thumbnail_image']['settings'] += $info['image']['settings'];
  if (isset($info['picture'])) {
    $info['ffmpeg_thumbnail_picture']['settings'] += $info['picture']['settings'];
  }
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ffmpeg_video_thumbnail_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state) {
  $form = array();
  switch ($instance['display'][$view_mode]['type']) {
    case 'ffmpeg_thumbnail_image':
      $form += image_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
      break;

    case 'ffmpeg_thumbnail_picture':
      $form += picture_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
      break;
  }
  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ffmpeg_video_thumbnail_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = '';
  switch ($instance['display'][$view_mode]['type']) {
    case 'ffmpeg_thumbnail_image':
      $summary .= image_field_formatter_settings_summary($field, $instance, $view_mode);
      break;

    case 'ffmpeg_thumbnail_picture':
      $summary .= picture_field_formatter_settings_summary($field, $instance, $view_mode);
      break;
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_view()
 */
function ffmpeg_video_thumbnail_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $image_items = array();
  $thumbnail_dir = file_default_scheme() . '://' . variable_get('ffmpeg_video_thumbnail_dir', 'thumbnails');
  foreach ($items as $delta => $item) {
    $thumbnail_filename = "{$item['fid']}.jpg";
    $thumbnail_filepath =  $thumbnail_dir . '/' .$thumbnail_filename;
    // Only works on local file.
    $scheme = file_uri_scheme($item['uri']);
    $wrappers = file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL);
    $file_is_local =  !empty($wrappers[$scheme]) && empty($wrappers[$scheme]['remote']);
    if ($file_is_local && file_prepare_directory($thumbnail_dir, FILE_CREATE_DIRECTORY)) {
      if (!file_exists($thumbnail_filepath)) {
        try {
          $ffmpeg = php_ffmpeg();
          $video = $ffmpeg->open(drupal_realpath($item['uri']));
          $video_stream = $video->getStreams()->videos()->first();
          $duration = $video_stream->get('duration');
          $video
            ->frame(FFMpeg\Coordinate\TimeCode::fromSeconds($duration / 2))
            ->save(drupal_realpath($thumbnail_filepath));
          $image_items[$delta] = array(
            'uri' => $thumbnail_filepath,
            'alt' => '',
            'width' => $video_stream->get('width'),
            'height' => $video_stream->get('height'),
            'title' => '',
            'attributes' => array(
              'class' => array('video-thumbnail'),
            ),
          );
        }
        catch (Exception $e) {
          watchdog('FFMpeg Video Thumbnail', 'Error while extracting frame from @file, check php_ffmpeg log.', array('@file' => $item['uri']), WATCHDOG_ERROR,  url(current_path()));
        }
      }
      else {
        $image_info = image_get_info($thumbnail_filepath);
        $image_items[$delta] = array(
          'uri' => $thumbnail_filepath,
          'alt' => '',
          'width' => $image_info['width'],
          'height' => $image_info['height'],
          'title' => '',
          'attributes' => array(
            'class' => array('video-thumbnail'),
          ),
        );
      }
    }
  }
  switch ($display['type']) {
    case 'ffmpeg_thumbnail_image':
      return image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $image_items, $display);
      break;

    case 'ffmpeg_thumbnail_picture':
      return picture_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $image_items, $display);
      break;
  }
}
